{"version":3,"sources":["components/styles.js","data.js","components/NavBar.js","components/AdvancedSettings.js","components/InputForm.js","components/ResultTable.js","components/NetworkView.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","root","display","card","minWidth","maxWidth","padding","margin","marginTop","marginBottom","heading","fontSize","formControl","spacing","unit","selectEmpty","button","float","input","grow","flexGrow","networkView","minHeight","border","buttonBar","paddingTop","form_data","title","subheader","github","uploadType","uploadText","uploadHelp","uploadButtonText","ndexText","goldStandardText","goldStandardHelp","topText","topHelp","alphaText","alphaHelp","runText","withStyles","props","classes","handleBack","react_default","a","createElement","AppBar_default","position","Toolbar_default","IconButton_default","className","menuButton","color","aria-label","onClick","NavigateBefore_default","Typography_default","variant","Button_default","href","goldStandard","top","alpha","handleChange","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","FormControl_default","InputLabel_default","htmlFor","TextField_default","id","label","textField","value","onChange","FormHelperText_default","type","name","inputProps","step","min","max","InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSampleNetwork","_ref","asyncToGenerator","regenerator_default","mark","_callee","file","url","blob","wrap","_context","prev","next","fetch","then","res","sent","abrupt","stop","_x","apply","arguments","getNDExNetwork","_ref2","_callee2","ndex","column","ndex_url","server","uuid","_context2","URL","host","hash","substring","lastIndexOf","concat","_x2","_x3","getNetwork","_this$state","state","customUpload","Promise","resolve","reject","checkParameters","formData","_this$state2","get","set","handleRun","event","setState","defineProperty","target","files","length","console","log","onSubmit","data","FormData","form","fr","FileReader","onload","readAsDataURL","_this2","_this$state3","Card_default","CardHeader_default","ref","r","component","FormLabel_default","RadioGroup_default","group","FormControlLabel_default","control","Radio_default","accept","style","size","required","components_AdvancedSettings","Component","desc","b","orderBy","EnhancedTableHead","createSortHandler","property","onRequestSort","_this$props","order","TableHead_default","TableRow_default","columns","map","TableCell_default","key","numeric","sortDirection","Tooltip_default","placement","enterDelay","TableSortLabel_default","active","direction","React","EnhancedTable","_this3","handleRequestSort","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","isSelected","selected","indexOf","args","_this4","_this$props2","emptyRows","Math","tableWrapper","Table_default","table","aria-labelledby","ResultTable_EnhancedTableHead","TableBody_default","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","n","hover","handleClick","role","tabIndex","col","height","colSpan","TablePagination_default","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","Paper_default","components_NetworkView","ResultTable","disablePadding","App","axios","post","rows","keys","compareResults","components_NavBar","clear","components_Results","components_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWA4CeA,EA3CA,SAAAC,GAAK,MAAK,CACrBC,KAAM,CACFC,QAAS,SAEbC,KAAM,CACFC,SAAU,IACVC,SAAU,MACVC,QAAS,GACTC,OAAQ,OACRC,UAAW,GACXC,aAAc,IAElBC,QAAS,CACLC,SAAU,QAEdC,YAAa,CACTV,QAAS,OACTK,OAAQP,EAAMa,QAAQC,KACtBV,SAAU,KAEdW,YAAa,CACTP,UAAgC,EAArBR,EAAMa,QAAQC,MAE7BE,OAAQ,CACJC,MAAO,QACPV,OAAQ,YAEZW,MAAO,CACHhB,QAAS,QAEbiB,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTC,UAAW,QACXC,OAAQ,mBAEZC,UAAW,CACPtB,QAAQ,QACRuB,WAAY,UCtBLC,EAlBG,CACdC,MAAO,iBACPC,UAAW,uLACXC,OAAQ,mCACRC,WAAY,gBACZC,WAAY,kBACZC,WAAY,qBACZC,iBAAkB,yBAClBC,SAAU,eACVC,iBAAkB,2BAClBC,iBAAkB,WAClBC,QAAS,wBACTC,QAAS,uBACTC,UAAW,wBACXC,UAAW,0BACXC,QAAS,OCwBEC,uBAAW3C,EAAX2C,CA1BA,SAACC,GAAU,IACfC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,WAChB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,SACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACKF,GACGC,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACIM,UAAWT,EAAQU,WACnBC,MAAM,UACNC,aAAW,OACXC,QAASZ,GACTC,EAAAC,EAAAC,cAACU,EAAAX,EAAD,OAGRD,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYa,QAAQ,QAAQP,UAAWT,EAAQzB,KAAMoC,MAAM,WAA3D,kBAGAT,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAMpC,EAAUG,OAChB0B,MAAM,WAFV,oUC8CLb,4BAAW3C,EAAX2C,CA7Df,SAA0BC,GAAO,IACrBC,EAIaD,EAJbC,QACJmB,EAGiBpB,EAHjBoB,aACAC,EAEiBrB,EAFjBqB,IACAC,EACiBtB,EADjBsB,MACAC,EAAiBvB,EAAjBuB,aACJ,OACIpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACID,EAAAC,EAAAC,cAACoB,GAAArB,EAAD,CAAuBsB,WAAYvB,EAAAC,EAAAC,cAACsB,GAAAvB,EAAD,OAC/BD,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYM,UAAWT,EAAQlC,SAA/B,sBAEJoC,EAAAC,EAAAC,cAACuB,GAAAxB,EAAD,CAAuBM,UAAWT,EAAQ3C,MACtC6C,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAY2B,QAAQ,kBACpB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACI6B,GAAG,gBACHC,MAAOnD,EAAUS,iBACjBkB,UAAWT,EAAQkC,UACnBC,MAAOhB,EACPiB,SAAUd,EAAa,gBACvB3D,OAAO,WAEXuC,EAAAC,EAAAC,cAACiC,GAAAlC,EAAD,KAAiBrB,EAAUU,mBAE/BU,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAY2B,QAAQ,QACpB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACI6B,GAAG,MACHC,MAAOnD,EAAUW,QACjBgB,UAAWT,EAAQkC,UACnBC,MAAOf,EACPgB,SAAUd,EAAa,OACvB3D,OAAO,SACP2E,KAAK,WAETpC,EAAAC,EAAAC,cAACiC,GAAAlC,EAAD,KAAiBrB,EAAUY,UAE/BQ,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAY2B,QAAQ,UACpB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACIoC,KAAK,QACLP,GAAG,QACHC,MAAOnD,EAAUa,UACjBc,UAAWT,EAAQkC,UACnBC,MAAOd,EACPe,SAAUd,EAAa,SACvB3D,OAAO,SACP6E,WAAY,CAAEC,KAAM,GAAIC,IAAK,EAAIC,IAAK,GACtCL,KAAK,WAETpC,EAAAC,EAAAC,cAACiC,GAAAlC,EAAD,KAAiBrB,EAAUc,gBC9CzCgD,eACF,SAAAA,EAAY7C,GAAM,IAAA8C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjD,KAaVqD,iBAdkB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAApD,EAAAqD,KAcC,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAL,EAAApD,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTL,EAAM,YAAcD,EADXI,EAAAE,KAAA,EAEEC,MAAMN,GAAKO,KAAM,SAAAC,GAAG,OAAIA,EAAIP,SAF9B,cAEXA,EAFWE,EAAAM,KAAAN,EAAAO,OAAA,SAGRT,GAHQ,wBAAAE,EAAAQ,SAAAb,EAAAT,SAdD,gBAAAuB,GAAA,OAAAlB,EAAAmB,MAAAxB,KAAAyB,YAAA,GAAA5B,EA4BlB6B,eA5BkB,eAAAC,EAAA7B,OAAAQ,EAAA,EAAAR,CAAAS,EAAApD,EAAAqD,KA4BD,SAAAoB,EAAOC,EAAMC,GAAb,IAAAC,EAAAC,EAAAC,EAAAtB,EAAAC,EAAA,OAAAL,EAAApD,EAAA0D,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cACPe,EAAW,IAAII,IAAIN,GACnBG,EAASD,EAASK,KAClBH,EAAOF,EAASM,KAAKC,UAAUP,EAASM,KAAKE,YAAY,KAAO,GAChE5B,EAJO,0BAAA6B,OAIyBR,EAJzB,UAAAQ,OAIwCP,EAJxC,YAAAO,OAIuDV,GAJvDI,EAAAlB,KAAA,EAKIC,MAAMN,GAAKO,KAAK,SAAAC,GAAG,OAAIA,EAAIP,SAL/B,cAKTA,EALSsB,EAAAd,KAAAc,EAAAb,OAAA,SAMNT,GANM,wBAAAsB,EAAAZ,SAAAM,EAAA5B,SA5BC,gBAAAyC,EAAAC,GAAA,OAAAf,EAAAH,MAAAxB,KAAAyB,YAAA,GAAA5B,EAqClB8C,WAAa,SAACzG,GAAe,IAAA0G,EACY/C,EAAKgD,MAAnCC,EADkBF,EAClBE,aAAcjB,EADIe,EACJf,KAAMC,EADFc,EACEd,OAC3B,MAAmB,YAAf5F,EACO2D,EAAKO,iBAAiB,4BACR,WAAflE,EACC,IAAI6G,QAAQ,SAASC,EAASC,GACjCD,EAAQF,KAEU,SAAf5G,EACA2D,EAAK6B,eAAeG,EAAMC,QAD9B,GA7COjC,EAkDlBqD,gBAAkB,SAACC,GAAa,IAAAC,EACoBvD,EAAKgD,MAA/CzE,EADsBgF,EACtBhF,IAAKD,EADiBiF,EACjBjF,aAAc2D,EADGsB,EACHtB,OAAQ5F,EADLkH,EACKlH,WAOjC,GAL8B,KAA1BiH,EAASE,IAAI,UACbF,EAASG,IAAI,QAAS,IAE1BH,EAASG,IAAI,QAAS,CAAC,UAEJ,UAAfpH,EAGA,OAFAiH,EAASG,IAAI,SAAUxB,QACvBjC,EAAK9C,MAAMwG,UAAUJ,EAAUhF,EAAcC,GAIjDyB,EAAK8C,WAAWzG,GACfgF,KAAK,SAAAN,GACFuC,EAASG,IAAI,UAAW1C,GACxBf,EAAK9C,MAAMwG,UAAUJ,EAAUhF,EAAcC,MAnEnCyB,EAuElBvB,aAAe,SAAAiB,GAAI,OAAI,SAAAiE,GACN,iBAATjE,EAOJM,EAAK4D,SAAL3D,OAAA4D,EAAA,EAAA5D,CAAA,GAAiBP,EAAOiE,EAAMG,OAAOxE,QANC,IAA9BqE,EAAMG,OAAOC,MAAMC,SACnBC,QAAQC,IAAIP,EAAMG,OAAOC,MAAM,IAC/B/D,EAAK4D,SAAS,CAACX,aAAcU,EAAMG,OAAOC,MAAM,QA3E1C/D,EAkFlBmE,SAAW,SAACR,GACR,IAAMS,EAAO,IAAIC,SAASrE,EAAKsE,MAC/BtE,EAAKqD,gBAAgBe,IAjFrBpE,EAAKgD,MAAQ,CACT3G,WAAY,UACZ4G,aAAc,KACdjB,KAAM,yEACNC,OAAQ,SACR3D,aAAc,GACdC,IAAK,IACLC,MAAO,IAVGwB,2EAoBNa,GACR,OAAO,IAAIqC,QAAQ,SAACC,EAASC,GACzB,IAAImB,EAAK,IAAIC,WACbD,EAAGE,OAAStB,EACZoB,EAAGG,cAAc7D,sCA+DjB,IAAA8D,EAAAxE,KACIhD,EAAYgD,KAAKjD,MAAjBC,QADJyH,EASAzE,KAAK6C,MAPD3G,EAFJuI,EAEIvI,WACJ4G,EAHA2B,EAGA3B,aACAjB,EAJA4C,EAIA5C,KACAC,EALA2C,EAKA3C,OACA3D,EANAsG,EAMAtG,aACAC,EAPAqG,EAOArG,IACAC,EARAoG,EAQApG,MAGJ,OACInB,EAAAC,EAAAC,cAACsH,EAAAvH,EAAD,CAAMM,UAAWT,EAAQzC,MACrB2C,EAAAC,EAAAC,cAACuH,EAAAxH,EAAD,CACIpB,MAAOD,EAAUC,MACjBC,UAAWF,EAAUE,YAEzBkB,EAAAC,EAAAC,cAAA,QACIwH,IAAK,SAAAC,GAAOL,EAAKL,KAAOU,GAExB7F,GAAG,eACH9B,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAa2H,UAAU,WAAWrH,UAAWT,EAAQhC,aACjDkC,EAAAC,EAAAC,cAAC2H,EAAA5H,EAAD,CAAW2H,UAAU,UAAUhJ,EAAUI,YACzCgB,EAAAC,EAAAC,cAAC4H,EAAA7H,EAAD,CACIS,aAAW,cACXoB,GAAG,aACHvB,UAAWT,EAAQiI,MACnB9F,MAAOa,KAAK6C,MAAM3G,WAClBkD,SAAUY,KAAK1B,aAAa,eAE5BpB,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAkBgC,MAAM,UAAUgG,QAASjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,MAAW8B,MAAM,aAC5D/B,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAkBgC,MAAM,QAAQgG,QAASjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,MAAW8B,MAAM,UAC1D/B,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAkBgC,MAAM,SAASgG,QAASjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,MAAW8B,MAAM,WAC3D/B,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAkBgC,MAAM,OAAOgG,QAASjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,MAAW8B,MAAM,gBAIjD,WAAf/C,GACGgB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAAA,SACIiI,OAAO,WACP5H,UAAWT,EAAQ1B,MACnB0D,GAAG,gBACHM,KAAK,OACLF,SAAUY,KAAK1B,aAAa,kBAEhCpB,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,iBACX5B,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIa,QAAQ,YACR8G,UAAU,OACVQ,MAAO,CAACjK,MAAO,QACfoC,UAAWT,EAAQ5B,QAClBU,EAAUO,kBAEdyG,GAAgB5F,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAY2H,UAAU,KAClChC,EAAavD,KADD,IACQuD,EAAayC,KADrB,OAMb,SAAfrJ,GACGgB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAY2B,QAAQ,eACpB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACIqI,UAAQ,EACRxG,GAAG,aACHC,MAAOnD,EAAUQ,SACjBmB,UAAWT,EAAQkC,UACnBC,MAAO0C,EACPzC,SAAUY,KAAK1B,aAAa,QAC5B3D,OAAO,YAIH,WAAfuB,GACGgB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQhC,aAC5BkC,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAY2B,QAAQ,uBACpB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACIqI,UAAQ,EACRxG,GAAG,qBACHC,MAAM,kBACNxB,UAAWT,EAAQkC,UACnBC,MAAO2C,EACP1C,SAAUY,KAAK1B,aAAa,UAC5B3D,OAAO,YAInBuC,EAAAC,EAAAC,cAACqI,GAAD,CACItH,aAAcA,EACdC,IAAKA,EACLC,MAAOA,EACPC,aAAc0B,KAAK1B,eAEvBpB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAaM,UAAWT,EAAQpB,WAC5BsB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIa,QAAQ,YACRP,UAAWT,EAAQ5B,OACnByC,QAASmC,KAAKgE,UAEblI,EAAUe,mBA5Lf6I,aAwMT5I,wBAAW3C,EAAX2C,CAAmB8C,8LC7MlC,SAAS+F,GAAKxI,EAAGyI,EAAGC,GAChB,OAAID,EAAEC,GAAW1I,EAAE0I,IACP,EAERD,EAAEC,GAAW1I,EAAE0I,GACR,EAEJ,MAiBLC,8MACFC,kBAAoB,SAAAC,GAAQ,OAAI,SAAAxC,GAC5B3D,EAAK9C,MAAMkJ,cAAczC,EAAOwC,6EAG3B,IAAAxB,EAAAxE,KAAAkG,EACsBlG,KAAKjD,MAAxBoJ,EADHD,EACGC,MAAON,EADVK,EACUL,QAEf,OACI3I,EAAAC,EAAAC,cAACgJ,GAAAjJ,EAAD,KACID,EAAAC,EAAAC,cAACiJ,GAAAlJ,EAAD,KACK6C,KAAKjD,MAAMuJ,QAAQC,IAAI,SAAAzE,GACpB,OACI5E,EAAAC,EAAAC,cAACoJ,GAAArJ,EAAD,CACIsJ,IAAK3E,EAAO9C,GACZ0H,QAAS5E,EAAO4E,QAChBhM,QAAuB,SAAdoH,EAAO9C,GAAgB,OAAS,UACzC2H,cAAed,IAAY/D,EAAO9C,IAAKmH,GAEvCjJ,EAAAC,EAAAC,cAACwJ,GAAAzJ,EAAD,CACIpB,MAAM,OACN8K,UAAW/E,EAAO4E,QAAU,aAAe,eAC3CI,WAAY,KAEZ5J,EAAAC,EAAAC,cAAC2J,GAAA5J,EAAD,CACI6J,OAAQnB,IAAY/D,EAAO9C,GAC3BiI,UAAWd,EACXtI,QAAS2G,EAAKuB,kBAAkBjE,EAAO9C,KAEtC8C,EAAO7C,UAKzBe,eAlCSkH,IAAMxB,WAgDhCyB,eAGF,SAAAA,EAAYpK,GAAM,IAAAqK,EAAA,OAAAtH,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,IACdC,EAAAtH,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqH,GAAAhH,KAAAH,KAAMjD,KAaVsK,kBAAoB,SAAC7D,EAAOwC,GACxB,IAAMH,EAAUG,EACZG,EAAQ,OAERiB,EAAKvE,MAAMgD,UAAYG,GAAiC,SAArBoB,EAAKvE,MAAMsD,QAC9CA,EAAQ,OAGZiB,EAAK3D,SAAS,CAAE0C,QAAON,aAtBTuB,EAyBlBE,iBAAmB,SAAC9D,EAAO+D,GACvBH,EAAK3D,SAAS,CAAE8D,UA1BFH,EA6BlBI,wBAA0B,SAAAhE,GACtB4D,EAAK3D,SAAS,CAAEgE,YAAajE,EAAMG,OAAOxE,SA9B5BiI,EAiClBM,WAAa,SAAA1I,GAAE,OAAyC,IAArCoI,EAAKvE,MAAM8E,SAASC,QAAQ5I,IA/B3CoI,EAAKvE,MAAQ,CACTsD,MAAO,MACPN,QAAS,OACT0B,KAAM,EACNE,YAAa,IANHL,mFAUES,qCAyBX,IAAAC,EAAA9H,KAAA+H,EAC8B/H,KAAKjD,MAAhCC,EADH+K,EACG/K,QAASiH,EADZ8D,EACY9D,KAAMqC,EADlByB,EACkBzB,QADlB1D,EAEyC5C,KAAK6C,MAA3CsD,EAFHvD,EAEGuD,MAAON,EAFVjD,EAEUiD,QAAS4B,EAFnB7E,EAEmB6E,YAAaF,EAFhC3E,EAEgC2E,KAC/BS,EAAYP,EAAcQ,KAAKvI,IAAI+H,EAAaxD,EAAKJ,OAAS0D,EAAOE,GAE3E,OACIvK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKK,UAAWT,EAAQkL,cACpBhL,EAAAC,EAAAC,cAAC+K,GAAAhL,EAAD,CAAOM,UAAWT,EAAQoL,MAAOC,kBAAgB,cAC7CnL,EAAAC,EAAAC,cAACkL,GAAD,CACIhC,QAASA,EACTH,MAAOA,EACPN,QAASA,EACTI,cAAejG,KAAKqH,oBAExBnK,EAAAC,EAAAC,cAACmL,GAAApL,EAAD,KAnHxB,SAAoBqL,EAAOC,GACvB,IAAMC,EAAiBF,EAAMjC,IAAI,SAACoC,EAAIC,GAAL,MAAe,CAACD,EAAIC,KAMrD,OALAF,EAAeG,KAAK,SAAC1L,EAAGyI,GACpB,IAAMO,EAAQsC,EAAItL,EAAE,GAAIyI,EAAE,IAC1B,OAAc,IAAVO,EAAoBA,EACjBhJ,EAAE,GAAKyI,EAAE,KAEb8C,EAAenC,IAAI,SAAAoC,GAAE,OAAIA,EAAG,KA6GVG,CAAW7E,EA1GxC,SAAoBkC,EAAON,GACvB,MAAiB,SAAVM,EAAmB,SAAChJ,EAAGyI,GAAJ,OAAUD,GAAKxI,EAAGyI,EAAGC,IAAW,SAAC1I,EAAGyI,GAAJ,OAAWD,GAAKxI,EAAGyI,EAAGC,IAyGtCkD,CAAW5C,EAAON,IAC/BmD,MAAMzB,EAAOE,EAAaF,EAAOE,EAAcA,GAC/ClB,IAAI,SAAA0C,GACD,OACI/L,EAAAC,EAAAC,cAACiJ,GAAAlJ,EAAD,CACI+L,OAAK,EACLrL,QAAS,SAAA2F,GAAK,OAAIsE,EAAKqB,YAAY3F,EAAOyF,EAAEjK,KAC5CoK,KAAK,WACLC,UAAW,EACX5C,IAAKwC,EAAEjK,IAKN8I,EAAK/K,MAAMuJ,QAAQC,IAAI,SAAA+C,GAAG,OACnBA,EAAI5C,QACAxJ,EAAAC,EAAAC,cAACoJ,GAAArJ,EAAD,CAAWsJ,IAAK6C,EAAItK,GAAI0H,SAAO,GAAEuC,EAAEK,EAAItK,KAEvC9B,EAAAC,EAAAC,cAACoJ,GAAArJ,EAAD,CAAWsJ,IAAK6C,EAAItK,IAAKiK,EAAEK,EAAItK,UAK1DgJ,EAAY,GACT9K,EAAAC,EAAAC,cAACiJ,GAAAlJ,EAAD,CAAUmI,MAAO,CAAEiE,OAAQ,GAAKvB,IAC5B9K,EAAAC,EAAAC,cAACoJ,GAAArJ,EAAD,CAAWqM,QAAS,QAMxCtM,EAAAC,EAAAC,cAACqM,GAAAtM,EAAD,CACIuM,mBAAoB,CAAC,GAAI,GAAI,IAC7B5E,UAAU,MACV6E,MAAO1F,EAAKJ,OACZ4D,YAAaA,EACbF,KAAMA,EACNqC,oBAAqB,CACjBhM,aAAc,iBAElBiM,oBAAqB,CACjBjM,aAAc,aAElBkM,aAAc9J,KAAKsH,iBACnByC,oBAAqB/J,KAAKwH,kCAlGlBN,IAAMxB,WA+GnB5I,wBAAW3C,EAAX2C,CAAmBqK,ICxLnBrK,4BAAW3C,EAAX2C,CATf,SAAqBC,GAAO,IACjBC,EAAWD,EAAXC,QACP,OACAE,EAAAC,EAAAC,cAAA,OAAKK,UAAWT,EAAQvB,aAAxB,uBC+BWqB,4BAAW3C,EAAX2C,CA7Bf,SAAiBC,GAAO,IACbC,EAA6BD,EAA7BC,QAASiH,EAAoBlH,EAApBkH,KAAMhH,EAAcF,EAAdE,WACtB,OAAOC,EAAAC,EAAAC,cAAC4M,GAAA7M,EAAD,CAAOM,UAAWT,EAAQzC,MAC7B2C,EAAAC,EAAAC,cAAC6M,GAAD,CACIhG,KAAMA,IAEV/G,EAAAC,EAAAC,cAAC8M,GAAD,CACIjG,KAAMA,EACNqC,QAAS,CACL,CAAEtH,GAAI,KAAM0H,SAAS,EAAOyD,gBAAgB,EAAMlL,MAAO,QACzD,CAAED,GAAI,QAAS0H,SAAS,EAAMyD,gBAAgB,EAAOlL,MAAO,YAEpE/B,EAAAC,EAAAC,cAAA,OAAKK,UAAWT,EAAQpB,WACpBsB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQa,QAAQ,YAAYsH,MAAO,CAACjK,MAAO,QAASoC,UAAWT,EAAQ5B,OACnEyC,QAASZ,GADb,QAKAC,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQa,QAAQ,YAAYP,UAAWT,EAAQ5B,QAA/C,iBAGA8B,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQa,QAAQ,YAAYL,MAAM,UAAUF,UAAWT,EAAQ5B,QAA/D,oBCgCGgP,eAxDb,SAAAA,EAAYrN,GAAM,IAAA8C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoK,IAChBvK,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsK,GAAAjK,KAAAH,KAAMjD,KAWRwG,UAAY,SAACJ,EAAUhF,EAAcC,GAKnCiM,IAAMC,KAAK,UAAWnH,GACnBjC,KAAK,SAAAC,GACJ,IAAIoJ,EAAOzK,OAAO0K,KAAKrJ,EAAI8C,MAAMsC,IAAI,SAAAE,GACnC,MAAO,CAACzH,GAAIyH,EAAKtH,MAAOgC,EAAI8C,KAAKwC,MAGnC8D,EAAOA,EAAK1B,KAAKhJ,EAAK4K,gBAAkBzB,MAAM,EAAG5K,GACjDyB,EAAK4D,SAAS,CAACQ,KAAMsG,OAtBzB1K,EAAKgD,MAAQ,CACXoB,KAAM,MAHQpE,8EAOH1C,EAAGyI,GAChB,OAAOA,EAAEzG,MAAQhC,EAAEgC,sCAqBnBa,KAAKyD,SAAS,CAACQ,KAAM,wCAGd,IAAAO,EAAAxE,KACAiE,EAAQjE,KAAK6C,MAAboB,KAEP,OACE/G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsN,EAAD,CACEzN,WAAqB,OAATgH,EAAgB,KAAO,kBAAMO,EAAKmG,WAEhDzN,EAAAC,EAAAC,cAAA,OAAKkI,MAAO,CAACzJ,WAAY,UACb,OAAToI,EACC/G,EAAAC,EAAAC,cAACwN,GAAD,CACE3N,WAAY,kBAAMuH,EAAKmG,SACvB1G,KAAMA,IAGR/G,EAAAC,EAAAC,cAACyN,GAAD,CACEtH,UAAWvD,KAAKuD,qBAjDZmC,aCMEoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlO,EAAAC,EAAAC,cAACiO,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxK,KAAK,SAAAyK,GACjCA,EAAaC","file":"static/js/main.b13e3634.chunk.js","sourcesContent":["\nconst styles = theme => ({\n    root: {\n        display: 'block'\n    },\n    card: {\n        minWidth: 275,\n        maxWidth: '60%',\n        padding: 50,\n        margin: 'auto',\n        marginTop: 30,\n        marginBottom: 30\n    },\n    heading: {\n        fontSize: '15px'\n    },\n    formControl: {\n        display: 'flex',\n        margin: theme.spacing.unit,\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit * 2,\n    },\n    button: {\n        float: 'right',\n        margin: '0px 15px'\n    },\n    input: {\n        display: 'none',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    networkView: {\n        minHeight: '600px',\n        border: '2px solid black'\n    },\n    buttonBar: {\n        display:'block',\n        paddingTop: '20px',\n    }\n});\n\nexport default styles;","const form_data = {\n    title: 'NBGWAS Service',\n    subheader: 'The network-boosed GWAS package re-prioritizes significant single nucleotide polymorphisms (SNPs) to genes using network diffusion methods including random walk and heat diffusion.',\n    github: 'https://github.com/shfong/nbgwas',\n    uploadType: 'Choose source',\n    uploadText: 'Upload CSV File',\n    uploadHelp: 'or select a sample',\n    uploadButtonText: 'Upload Custom CSV File',\n    ndexText: 'Network UUID',\n    goldStandardText: 'Gold Standard (optional)',\n    goldStandardHelp: 'optional',\n    topText: 'Top N nodes to return',\n    topHelp: '# of nodes to return',\n    alphaText: 'Alpha (default = 0.2)',\n    alphaHelp: 'Alpha parameter for ...',\n    runText: 'Run'\n}\n\nexport default form_data;","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport NavigateBefore from '@material-ui/icons/NavigateBefore'\n\n\nimport styles from './styles'\nimport form_data from '../data';\n\nconst NavBar = (props) => {\n    const {classes, handleBack} = props;\n    return (\n        <div>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    {handleBack &&\n                        <IconButton \n                            className={classes.menuButton} \n                            color=\"inherit\" \n                            aria-label=\"Back\"\n                            onClick={handleBack}>\n                            <NavigateBefore />\n                        </IconButton>\n                    }\n                    <Typography variant=\"title\" className={classes.grow} color=\"inherit\">\n                        NBGWAS Service\n                    </Typography>\n                    <Button\n                        href={form_data.github}\n                        color=\"inherit\">Github</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\nexport default withStyles(styles)(NavBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport form_data from '../data'\nimport styles from './styles'\n\n\nfunction AdvancedSettings(props) {\n    const { classes, \n        goldStandard, \n        top, \n        alpha,\n        handleChange } = props;\n    return (\n        <ExpansionPanel>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.heading}>Advanced Settings</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.root}>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"gold-standard\"></InputLabel>\n                    <TextField\n                        id=\"gold-standard\"\n                        label={form_data.goldStandardText}\n                        className={classes.textField}\n                        value={goldStandard}\n                        onChange={handleChange('goldStandard')}\n                        margin=\"normal\"\n                    />\n                    <FormHelperText>{form_data.goldStandardHelp}</FormHelperText>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"top\"></InputLabel>\n                    <TextField\n                        id=\"top\"\n                        label={form_data.topText}\n                        className={classes.textField}\n                        value={top}\n                        onChange={handleChange('top')}\n                        margin=\"normal\"\n                        type=\"number\"\n                    />\n                    <FormHelperText>{form_data.topHelp}</FormHelperText>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"alpha\"></InputLabel>\n                    <TextField\n                        name=\"alpha\"\n                        id=\"alpha\"\n                        label={form_data.alphaText}\n                        className={classes.textField}\n                        value={alpha}\n                        onChange={handleChange('alpha')}\n                        margin=\"normal\"\n                        inputProps={{ step: .1, min: .0, max: 1 }}\n                        type=\"number\"\n                    />\n                    <FormHelperText>{form_data.alphaHelp}</FormHelperText>\n                </FormControl>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nAdvancedSettings.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AdvancedSettings);","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Typography from '@material-ui/core/Typography'\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\n\nimport AdvancedSettings from './AdvancedSettings';\nimport form_data from '../data'\nimport styles from './styles'\n\nclass InputForm extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            uploadType: 'sampleA',\n            customUpload: null,\n            ndex: 'http://dev2.ndexbio.org/#/network/5f3a589b-e91e-11e8-ad43-0660b7976219',\n            column: 'weight',\n            goldStandard: '',\n            top: 100,\n            alpha: 0.2\n        }\n    }\n\n    getSampleNetwork = async (file) => {\n        const url = '/samples/' + file;\n        let blob = await fetch(url).then (res => res.blob());\n        return blob;\n    };\n\n    pFileReader(file) {\n        return new Promise((resolve, reject) => {\n            var fr = new FileReader();\n            fr.onload = resolve;  // CHANGE to whatever function you want which would eventually call resolve\n            fr.readAsDataURL(file);\n        });\n    }\n\n    getNDExNetwork = async (ndex, column) => {\n        const ndex_url = new URL(ndex)\n        const server = ndex_url.host\n        const uuid = ndex_url.hash.substring(ndex_url.hash.lastIndexOf('/') + 1)\n        const url = `/getThreeColumn?server=${server}&uuid=${uuid}&column=${column}`;\n        let blob = await fetch(url).then(res => res.blob());\n        return blob;\n    }\n\n    getNetwork = (uploadType) => {\n        const {customUpload, ndex, column} = this.state;\n        if (uploadType === 'sampleA'){\n            return this.getSampleNetwork('3col_interactions260.csv');\n        }else if (uploadType === 'custom') {\n            return new Promise(function(resolve, reject) {\n                resolve(customUpload);\n            });\n        } else if (uploadType === 'ndex') {\n            return this.getNDExNetwork(ndex, column);\n        }\n    }\n\n    checkParameters = (formData) => {\n        let { top, goldStandard, column, uploadType } = this.state;        \n\n        if (formData.get('alpha') === ''){\n            formData.set('alpha', .2);\n        }\n        formData.set('seeds', ['SEPT7'])\n\n        if (uploadType === 'bigim'){\n            formData.set('column', column)\n            this.props.handleRun(formData, goldStandard, top);\n            return;\n        }\n        \n        this.getNetwork(uploadType)\n        .then(blob => {\n            formData.set('network', blob)\n            this.props.handleRun(formData, goldStandard, top);\n        })\n    }\n\n    handleChange = name => event => {\n        if (name === 'customUpload'){\n            if (event.target.files.length === 1){\n                console.log(event.target.files[0])\n                this.setState({customUpload: event.target.files[0]})\n            }\n            return;\n        }\n        this.setState({ [name]: event.target.value });\n    };\n\n    onSubmit = (event) => {\n        const data = new FormData(this.form)\n        this.checkParameters(data)\n    }\n\n    render(){\n        const { classes } = this.props;\n        const { uploadType, \n            customUpload, \n            ndex,\n            column,\n            goldStandard, \n            top,\n            alpha\n        } = this.state;\n\n        return (\n            <Card className={classes.card}>\n                <CardHeader\n                    title={form_data.title}\n                    subheader={form_data.subheader} \n                />\n                <form\n                    ref={r => { this.form = r }}\n                    // onSubmit={this.handleSubmit} \n                    id=\"nbgwas_form\">\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">{form_data.uploadType}</FormLabel>\n                        <RadioGroup\n                            aria-label=\"Upload Type\"\n                            id=\"uploadType\"\n                            className={classes.group}\n                            value={this.state.uploadType}\n                            onChange={this.handleChange('uploadType')}\n                        >\n                            <FormControlLabel value=\"sampleA\" control={<Radio />} label=\"Sample A\" />\n                            <FormControlLabel value=\"bigim\" control={<Radio />} label=\"Bigim\" />\n                            <FormControlLabel value=\"custom\" control={<Radio />} label=\"Custom\" />\n                            <FormControlLabel value=\"ndex\" control={<Radio />} label=\"NDEx UUID\" />\n                            \n                        </RadioGroup>\n                    </FormControl>\n                    {uploadType === 'custom' &&\n                        <FormControl className={classes.formControl}>\n                            <input\n                                accept=\"text/csv\"\n                                className={classes.input}\n                                id=\"custom-upload\"\n                                type=\"file\"\n                                onChange={this.handleChange('customUpload')}\n                            />\n                            <label htmlFor=\"custom-upload\">\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"span\"\n                                    style={{float: 'none'}}\n                                    className={classes.button}>\n                                    {form_data.uploadButtonText}\n                                </Button>\n                                {customUpload && <Typography component='p'>\n                                    {customUpload.name} {customUpload.size}b\n                                </Typography>}\n                            </label>\n                        </FormControl>\n                    }\n                    {uploadType === 'ndex' && \n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"ndex-entry\"></InputLabel>\n                            <TextField\n                                required\n                                id=\"ndex-entry\"\n                                label={form_data.ndexText}\n                                className={classes.textField}\n                                value={ndex}\n                                onChange={this.handleChange('ndex')}\n                                margin=\"normal\"\n                            />\n                        </FormControl>\n                    }\n                    {uploadType === 'biggim' &&\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"bigim-column-entry\"></InputLabel>\n                            <TextField\n                                required\n                                id=\"bigim-column-entry\"\n                                label=\"Bigim Attribute\"\n                                className={classes.textField}\n                                value={column}\n                                onChange={this.handleChange('column')}\n                                margin=\"normal\"\n                            />\n                        </FormControl>\n                    }\n                    <AdvancedSettings \n                        goldStandard={goldStandard}\n                        top={top}\n                        alpha={alpha}\n                        handleChange={this.handleChange}\n                    />\n                    <FormControl className={classes.buttonBar}>\n                        <Button\n                            variant=\"contained\"\n                            className={classes.button}\n                            onClick={this.onSubmit}\n                        >\n                            {form_data.runText}\n                        </Button>\n                    </FormControl>\n                </form>\n            </Card>\n        )\n    }\n}\nInputForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(InputForm);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport styles from './styles'\n\n\n\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n}\n\nclass EnhancedTableHead extends React.Component {\n    createSortHandler = property => event => {\n        this.props.onRequestSort(event, property);\n    };\n\n    render() {\n        const { order, orderBy } = this.props;\n\n        return (\n            <TableHead>\n                <TableRow>\n                    {this.props.columns.map(column => {\n                        return (\n                            <TableCell\n                                key={column.id}\n                                numeric={column.numeric}\n                                padding={column.id === 'name' ? 'none' : 'default'}\n                                sortDirection={orderBy === column.id ? order : false}\n                            >\n                                <Tooltip\n                                    title=\"Sort\"\n                                    placement={column.numeric ? 'bottom-end' : 'bottom-start'}\n                                    enterDelay={300}\n                                >\n                                    <TableSortLabel\n                                        active={orderBy === column.id}\n                                        direction={order}\n                                        onClick={this.createSortHandler(column.id)}\n                                    >\n                                        {column.label}\n                                    </TableSortLabel>\n                                </Tooltip>\n                            </TableCell>\n                        );\n                    }, this)}\n                </TableRow>\n            </TableHead>\n        );\n    }\n}\n\nEnhancedTableHead.propTypes = {\n    onRequestSort: PropTypes.func.isRequired,\n    order: PropTypes.string.isRequired,\n    orderBy: PropTypes.string.isRequired,\n    columns: PropTypes.array.isRequired\n};\n\nclass EnhancedTable extends React.Component {\n    \n\n    constructor(props){\n        super(props)\n        this.state = {\n            order: 'asc',\n            orderBy: 'name',\n            page: 0,\n            rowsPerPage: 15,\n        };\n    }\n\n    componentWillUpdate(args){\n        \n    }\n\n    handleRequestSort = (event, property) => {\n        const orderBy = property;\n        let order = 'desc';\n\n        if (this.state.orderBy === property && this.state.order === 'desc') {\n            order = 'asc';\n        }\n\n        this.setState({ order, orderBy });\n    };\n\n    handleChangePage = (event, page) => {\n        this.setState({ page });\n    };\n\n    handleChangeRowsPerPage = event => {\n        this.setState({ rowsPerPage: event.target.value });\n    };\n\n    isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n    render() {\n        const { classes, data, columns } = this.props;\n        const { order, orderBy, rowsPerPage, page } = this.state;\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n        return (\n            <div>\n                <div className={classes.tableWrapper}>\n                    <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                        <EnhancedTableHead\n                            columns={columns}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={this.handleRequestSort}\n                        />\n                        <TableBody>\n                            {stableSort(data, getSorting(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map(n => {\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={event => this.handleClick(event, n.id)}\n                                            role=\"checkbox\"\n                                            tabIndex={-1}\n                                            key={n.id}\n                                        >\n                                            {/* <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                                                {n.id}\n                                            </TableCell> */}\n                                            {this.props.columns.map(col => \n                                                    col.numeric ?\n                                                        <TableCell key={col.id} numeric>{n[col.id]}</TableCell>\n                                                    :\n                                                        <TableCell key={col.id}>{n[col.id]}</TableCell>\n                                            )}\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 49 * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </div>\n                <TablePagination\n                    rowsPerPageOptions={[15, 25, 50]}\n                    component=\"div\"\n                    count={data.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    backIconButtonProps={{\n                        'aria-label': 'Previous Page',\n                    }}\n                    nextIconButtonProps={{\n                        'aria-label': 'Next Page',\n                    }}\n                    onChangePage={this.handleChangePage}\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                />\n            </div>\n        );\n    }\n}\n\nEnhancedTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(EnhancedTable);\n","import React from 'react'\nimport styles from './styles'\nimport { withStyles } from '@material-ui/core/styles';\n\n\nfunction NetworkView(props) {\n    const {classes} = props;\n    return (\n    <div className={classes.networkView}>\n        Network View Here\n    </div>\n    );\n}\n\nexport default withStyles(styles)(NetworkView);","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport styles from './styles'\nimport ResultTable from './ResultTable'\nimport NetworkView from './NetworkView'\n\n\n\nfunction Results(props) {\n    const {classes, data, handleBack} = props;\n    return <Paper className={classes.card}>\n        <NetworkView \n            data={data}    \n        />\n        <ResultTable\n            data={data}\n            columns={[\n                { id: 'id', numeric: false, disablePadding: true, label: 'Name' },\n                { id: 'value', numeric: true, disablePadding: false, label: 'Value' }]}\n          />\n        <div className={classes.buttonBar}>\n            <Button variant=\"contained\" style={{float: 'none'}} className={classes.button}\n                onClick={handleBack}>\n                Back\n            </Button>\n\n            <Button variant=\"contained\" className={classes.button}>\n                Export to CSV\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n                View on NDEx\n            </Button>\n        </div>\n\n    </Paper>;\n}\n\nexport default withStyles(styles)(Results)","import React, { Component } from 'react';\nimport NavBar from './components/NavBar'\nimport axios from 'axios'\n\nimport InputForm from './components/InputForm'\nimport Results from './components/Results'\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: null\n    }\n  }\n\n  compareResults(a, b) {\n    return b.value - a.value\n  }\n\n\n  handleRun = (formData, goldStandard, top) => {\n    // for (var el of formData.entries()){\n    //   console.log(el)\n    // }\n    // network, seeds, alpha\n    axios.post(\"/nbgwas\", formData)\n      .then(res => {\n        let rows = Object.keys(res.data).map(key => {\n          return {id: key, value: res.data[key]}\n        })\n\n        rows = rows.sort(this.compareResults, ).slice(0, top);\n        this.setState({data: rows})\n      })\n  }\n\n  clear() {\n    this.setState({data: null})\n  }\n\n  render() {\n    const {data} = this.state;\n\n    return (\n      <div >\n        <NavBar \n          handleBack={data === null ? null : () => this.clear()}\n          />\n        <div style={{paddingTop: '100px'}}>\n          {data !== null ?\n            <Results\n              handleBack={() => this.clear()}\n              data={data}\n              />\n            :\n            <InputForm\n              handleRun={this.handleRun} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}