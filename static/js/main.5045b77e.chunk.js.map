{"version":3,"sources":["components/NavBar.js","components/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","InputForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkParameters","handleRun","state","handleChange","name","event","setState","defineProperty","target","value","files","length","console","log","customUpload","upload","network","goldStandard","top","classes","_this$state","Card_default","className","card","CardHeader_default","title","subheader","FormControl_default","formControl","InputLabel_default","htmlFor","shrink","Select_default","required","native","onChange","inputProps","id","accept","input","type","Button_default","component","button","size","TextField_default","label","textField","margin","FormHelperText_default","CardActions_default","onClick","Component","withStyles","theme","minWidth","maxWidth","padding","marginTop","marginBottom","display","spacing","unit","selectEmpty","marginRight","App","args","components_NavBar","components_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5045b77e.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nconst NavBar = () => {\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"title\" color=\"inherit\">\n                        React & Material-UI Sample Application\n                </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Typography from '@material-ui/core/Typography'\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\n\n\nconst styles = theme => ({\n    card: {\n        minWidth: 275,\n        maxWidth: '60%',\n        padding: 50,\n        margin: 'auto',\n        marginTop: 30,\n        marginBottom: 30,\n    },\n    formControl: {\n        display: 'flex',\n        margin: theme.spacing.unit,\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit * 2,\n    },\n    textField: {\n        \n    },\n    button: {\n        margin: 'auto',\n        marginRight: 30\n    },\n    input: {\n        display: 'none',\n    },\n});\n\nclass InputForm extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            upload: '',\n            customUpload: false,\n            network: '',\n            goldStandard: '',\n            top: 100\n        }\n\n    }\n\n    checkParameters = () => {\n        this.props.handleRun(this.state)\n    }\n\n    handleChange = name => event => {\n        if (name === 'customUpload'){\n            if (event.target.files.length === 1){\n                console.log(event.target.files[0])\n                this.setState({customUpload: event.target.files[0]})\n            }\n            return;\n        }\n        this.setState({ [name]: event.target.value });\n    };\n\n    render(){\n        const { classes } = this.props;\n        const { upload, \n            customUpload, \n            network, \n            goldStandard, \n            top\n        } = this.state;\n\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardHeader\n                        title=\"NBGWAS Service\"\n                        subheader=\"Service information will be added shortly\"\n                    />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"upload-dropdown\" shrink>Upload</InputLabel>\n                        <Select\n                            required\n                            native\n                            value={this.state.upload}\n                            onChange={this.handleChange('upload')}\n                            inputProps={{\n                                name: 'upload',\n                                id: 'upload-dropdown',\n                            }}\n                        >\n                            <option value=\"sampleA\">Sample A</option>\n                            <option value=\"sampleB\">Sample B</option>\n                            <option value=\"custom\">Custom</option>\n                        </Select>\n                    </FormControl>\n                    {upload === 'custom' &&\n                        <FormControl className={classes.formControl}>\n                            {/* <InputLabel htmlFor=\"custom-upload\" shrink>Custom Upload</InputLabel> */}\n                            <input\n                                accept=\"text/*\"\n                                className={classes.input}\n                                id=\"custom-upload\"\n                                type=\"file\"\n                                onChange={this.handleChange('customUpload')}\n                            />\n                            <label htmlFor=\"custom-upload\">\n                                <Button variant=\"contained\" component=\"span\" className={classes.button}>\n                                    Upload Custom CSV File\n                                </Button>\n                                {customUpload && <Typography component='p'>\n                                    {customUpload.name} {customUpload.size}b\n                                </Typography>}\n                            </label>\n                        </FormControl>\n                    }\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"network-entry\"></InputLabel>\n                        <TextField\n                            required\n                            id=\"network-entry\"\n                            label=\"Network UUID\"\n                            className={classes.textField}\n                            value={network}\n                            onChange={this.handleChange('network')}\n                            margin=\"normal\"\n                        />\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"gold-standard\"></InputLabel>\n                        <TextField\n                            id=\"gold-standard\"\n                            label=\"Gold Standard (optional)\"\n                            className={classes.textField}\n                            value={goldStandard}\n                            onChange={this.handleChange('goldStandard')}\n                            margin=\"normal\"\n                        />\n                        <FormHelperText>Optional. Used as a comparison</FormHelperText>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"top\"></InputLabel>\n                        <TextField\n                            id=\"top\"\n                            label=\"Top N\"\n                            className={classes.textField}\n                            value={top}\n                            onChange={this.handleChange('top')}\n                            margin=\"normal\"\n                        />\n                        <FormHelperText>Top N Nodes</FormHelperText>\n                    </FormControl>\n                    <CardActions>\n                        <Button \n                            variant=\"contained\" \n                            className={classes.button} \n                            onClick={this.checkParameters}>\n                            Run\n                        </Button>\n                    </CardActions>\n                </Card>\n            </div>\n        )\n    }\n}\nInputForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(InputForm);","import React, { Component } from 'react';\nimport NavBar from './components/NavBar'\nimport InputForm from './components/InputForm'\n\nclass App extends Component {\n\n  handleRun(args){\n    console.log(args)\n  }\n\n  render() {\n    return (\n      <div >\n        <NavBar />\n        <InputForm \n          handleRun={this.handleRun}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}