{"version":3,"sources":["components/styles.js","data.js","components/NavBar.js","components/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","card","minWidth","maxWidth","padding","margin","marginTop","marginBottom","formControl","display","spacing","unit","selectEmpty","textField","button","marginRight","input","grow","flexGrow","form_data","title","subheader","github","api","uploadType","uploadText","uploadHelp","uploadButtonText","ndexText","goldStandardText","goldStandardHelp","topText","topHelp","alphaText","alphaHelp","runText","withStyles","props","classes","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","className","color","Button_default","href","InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNetwork","state","customUpload","ndex","checkParameters","_this$state","goldStandard","top","alpha","length","parseFloat","network","handleRun","handleChange","name","event","console","log","target","value","setState","defineProperty","files","_this$state2","Card_default","CardHeader_default","FormControl_default","component","FormLabel_default","RadioGroup_default","aria-label","group","onChange","FormControlLabel_default","control","Radio_default","label","accept","id","type","htmlFor","size","InputLabel_default","TextField_default","required","FormHelperText_default","inputProps","step","min","max","CardActions_default","onClick","Component","App","args","axios","post","then","res","components_NavBar","components_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a25f745.chunk.js","sourcesContent":["const styles = theme => ({\n    card: {\n        minWidth: 275,\n        maxWidth: '60%',\n        padding: 50,\n        margin: 'auto',\n        marginTop: 30,\n        marginBottom: 30,\n    },\n    formControl: {\n        display: 'flex',\n        margin: theme.spacing.unit,\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit * 2,\n    },\n    textField: {\n\n    },\n    button: {\n        margin: 'auto',\n        marginRight: 30\n    },\n    input: {\n        display: 'none',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n});\n\nexport default styles;","const form_data = {\n    title: 'NBGWAS Service',\n    subheader: 'The network-boosed GWAS package re-prioritizes significant single nucleotide polymorphisms (SNPs) to genes using network diffusion methods including random walk and heat diffusion.',\n    github: 'https://github.com/shfong/nbgwas',\n    api: 'http://ec2-35-167-36-71.us-west-2.compute.amazonaws.com:5000/nbgwas',\n    uploadType: 'Choose source',\n    uploadText: 'Upload CSV File',\n    uploadHelp: 'or select a sample',\n    uploadButtonText: 'Upload Custom CSV File',\n    ndexText: 'Network UUID',\n    goldStandardText: 'Gold Standard (optional)',\n    goldStandardHelp: 'optional',\n    topText: 'Top N nodes to return',\n    topHelp: '# of nodes to return',\n    alphaText: 'Alpha (default = 0.2)',\n    alphaHelp: 'Alpha parameter for ...',\n    runText: 'Run'\n}\n\nexport default form_data;","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from'@material-ui/core/Button'\n\nimport styles from './styles'\nimport form_data from '../data';\n\nconst NavBar = (props) => {\n    const {classes} = props;\n    return (\n        <div>\n            <AppBar position=\"static\">\n                \n                <Toolbar>\n                    <Typography variant=\"title\" className={classes.grow} color=\"inherit\">\n                        NBGWAS Service\n                    </Typography>\n                    <Button\n                        href={form_data.github}\n                        color=\"inherit\">Github</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\nexport default withStyles(styles)(NavBar);","import React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Typography from '@material-ui/core/Typography'\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\n\nimport form_data from '../data'\nimport styles from './styles'\n\nclass InputForm extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            uploadType: 'sampleA',\n            customUpload: null,\n            ndex: '',\n            goldStandard: '',\n            top: 100,\n            alpha: 0.2\n        }\n    }\n\n    getNetwork = () => {\n        const {uploadType} = this.state;\n        if (uploadType === 'sampleA'){\n            return 'SAMPLE A';\n        }else if (uploadType === 'custom') {\n            return this.state.customUpload;\n        } else if (uploadType === 'ndex') {\n            return this.state.ndex;\n        }\n    }\n\n    checkParameters = () => {\n        let {\n            goldStandard,\n            top,\n            alpha\n        } = this.state;\n\n        alpha = alpha.length === 0 ? .2 : parseFloat(alpha);\n        const network = this.getNetwork();\n\n        this.props.handleRun({\n            network,\n            alpha,\n            goldStandard,\n            top\n        })\n    }\n\n    handleChange = name => event => {\n        if (name === 'customUpload'){\n            if (event.target.files.length === 1){\n                console.log(event.target.files[0])\n                this.setState({customUpload: event.target.files[0]})\n            }\n            return;\n        }\n        console.log(name + \" \" + event.target.value)\n        this.setState({ [name]: event.target.value });\n    };\n\n    render(){\n        const { classes } = this.props;\n        const { uploadType, \n            customUpload, \n            ndex, \n            goldStandard, \n            top,\n            alpha\n        } = this.state;\n\n        return (\n            <div>\n                <Card className={classes.card}>\n                    <CardHeader\n                        title={form_data.title}\n                        subheader={form_data.subheader} \n                    />\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">{form_data.uploadType}</FormLabel>\n                        <RadioGroup\n                            aria-label=\"Upload Type\"\n                            name=\"uploadType\"\n                            className={classes.group}\n                            value={this.state.uploadType}\n                            onChange={this.handleChange('uploadType')}\n                        >\n                            <FormControlLabel value=\"sample A\" control={<Radio />} label=\"Sample A\" />\n                            <FormControlLabel value=\"sample B\" control={<Radio />} label=\"Sample B\" />\n                            <FormControlLabel value=\"custom\" control={<Radio />} label=\"Custom\" />\n                            <FormControlLabel value=\"ndex\" control={<Radio />} label=\"NDEx UUID\" />\n                            \n                        </RadioGroup>\n                    </FormControl>\n                    {uploadType === 'custom' &&\n                        <FormControl className={classes.formControl}>\n                            <input\n                                accept=\"text/*\"\n                                className={classes.input}\n                                id=\"custom-upload\"\n                                type=\"file\"\n                                onChange={this.handleChange('customUpload')}\n                            />\n                            <label htmlFor=\"custom-upload\">\n                                <Button variant=\"contained\" component=\"span\" className={classes.button}>\n                                    {form_data.uploadButtonText}\n                                </Button>\n                                {customUpload && <Typography component='p'>\n                                    {customUpload.name} {customUpload.size}b\n                                </Typography>}\n                            </label>\n                        </FormControl>\n                    }\n                    {uploadType === 'ndex' && \n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"ndex-entry\"></InputLabel>\n                            <TextField\n                                required\n                                id=\"ndex-entry\"\n                                label={form_data.ndexText}\n                                className={classes.textField}\n                                value={ndex}\n                                onChange={this.handleChange('ndex')}\n                                margin=\"normal\"\n                            />\n                        </FormControl>\n                    }\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"gold-standard\"></InputLabel>\n                        <TextField\n                            id=\"gold-standard\"\n                            label={form_data.goldStandardText}\n                            className={classes.textField}\n                            value={goldStandard}\n                            onChange={this.handleChange('goldStandard')}\n                            margin=\"normal\"\n                        />\n                        <FormHelperText>{form_data.goldStandardHelp}</FormHelperText>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"top\"></InputLabel>\n                        <TextField\n                            id=\"top\"\n                            label={form_data.topText}\n                            className={classes.textField}\n                            value={top}\n                            onChange={this.handleChange('top')}\n                            margin=\"normal\"\n                            type=\"number\"\n                        />\n                        <FormHelperText>{form_data.topHelp}</FormHelperText>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"alpha\"></InputLabel>\n                        <TextField\n                            id=\"alpha\"\n                            label={form_data.alphaText}\n                            className={classes.textField}\n                            value={alpha}\n                            onChange={this.handleChange('alpha')}\n                            margin=\"normal\"\n                            inputProps={{step : .1, min: .0, max: 1}}\n                            type=\"number\"\n                        />\n                        <FormHelperText>{form_data.alphaHelp}</FormHelperText>\n                    </FormControl>\n                    <CardActions>\n                        <Button \n                            variant=\"contained\" \n                            className={classes.button} \n                            onClick={this.checkParameters}>\n                            {form_data.runText}\n                        </Button>\n                    </CardActions>\n                </Card>\n            </div>\n        )\n    }\n}\nInputForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(InputForm);","import React, { Component } from 'react';\nimport NavBar from './components/NavBar'\nimport InputForm from './components/InputForm'\nimport form_data from './data'\nimport axios from 'axios'\n\nclass App extends Component {\n\n  handleRun(args){\n    console.log(args)\n    // network, seeds, alpha\n    \n    axios.post(form_data.api, args)\n    .then(res => {\n      console.log(res)\n    })\n  }\n\n  render() {\n    return (\n      <div >\n        <NavBar />\n        <InputForm \n          handleRun={this.handleRun}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}